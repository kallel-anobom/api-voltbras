module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateSuitablePlanet {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createSuitablePlanet(data: SuitablePlanetCreateInput!): SuitablePlanet!
  updateSuitablePlanet(data: SuitablePlanetUpdateInput!, where: SuitablePlanetWhereUniqueInput!): SuitablePlanet
  updateManySuitablePlanets(data: SuitablePlanetUpdateManyMutationInput!, where: SuitablePlanetWhereInput): BatchPayload!
  upsertSuitablePlanet(where: SuitablePlanetWhereUniqueInput!, create: SuitablePlanetCreateInput!, update: SuitablePlanetUpdateInput!): SuitablePlanet!
  deleteSuitablePlanet(where: SuitablePlanetWhereUniqueInput!): SuitablePlanet
  deleteManySuitablePlanets(where: SuitablePlanetWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  suitablePlanet(where: SuitablePlanetWhereUniqueInput!): SuitablePlanet
  suitablePlanets(where: SuitablePlanetWhereInput, orderBy: SuitablePlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SuitablePlanet]!
  suitablePlanetsConnection(where: SuitablePlanetWhereInput, orderBy: SuitablePlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuitablePlanetConnection!
  node(id: ID!): Node
}

type Subscription {
  suitablePlanet(where: SuitablePlanetSubscriptionWhereInput): SuitablePlanetSubscriptionPayload
}

type SuitablePlanet {
  id: ID!
  name: String!
  mass: Float!
  hasStation: Boolean!
}

type SuitablePlanetConnection {
  pageInfo: PageInfo!
  edges: [SuitablePlanetEdge]!
  aggregate: AggregateSuitablePlanet!
}

input SuitablePlanetCreateInput {
  id: ID
  name: String!
  mass: Float!
  hasStation: Boolean!
}

type SuitablePlanetEdge {
  node: SuitablePlanet!
  cursor: String!
}

enum SuitablePlanetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mass_ASC
  mass_DESC
  hasStation_ASC
  hasStation_DESC
}

type SuitablePlanetPreviousValues {
  id: ID!
  name: String!
  mass: Float!
  hasStation: Boolean!
}

type SuitablePlanetSubscriptionPayload {
  mutation: MutationType!
  node: SuitablePlanet
  updatedFields: [String!]
  previousValues: SuitablePlanetPreviousValues
}

input SuitablePlanetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SuitablePlanetWhereInput
  AND: [SuitablePlanetSubscriptionWhereInput!]
}

input SuitablePlanetUpdateInput {
  name: String
  mass: Float
  hasStation: Boolean
}

input SuitablePlanetUpdateManyMutationInput {
  name: String
  mass: Float
  hasStation: Boolean
}

input SuitablePlanetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  mass: Float
  mass_not: Float
  mass_in: [Float!]
  mass_not_in: [Float!]
  mass_lt: Float
  mass_lte: Float
  mass_gt: Float
  mass_gte: Float
  hasStation: Boolean
  hasStation_not: Boolean
  AND: [SuitablePlanetWhereInput!]
}

input SuitablePlanetWhereUniqueInput {
  id: ID
}
`
      }
    