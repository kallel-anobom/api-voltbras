module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMass {
  count: Int!
}

type AggregatePlanet {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mass {
  value: Int
  unit: String
}

type MassConnection {
  pageInfo: PageInfo!
  edges: [MassEdge]!
  aggregate: AggregateMass!
}

input MassCreateInput {
  value: Int
  unit: String
}

input MassCreateManyInput {
  create: [MassCreateInput!]
}

type MassEdge {
  node: Mass!
  cursor: String!
}

enum MassOrderByInput {
  value_ASC
  value_DESC
  unit_ASC
  unit_DESC
}

type MassPreviousValues {
  value: Int
  unit: String
}

input MassScalarWhereInput {
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  AND: [MassScalarWhereInput!]
  OR: [MassScalarWhereInput!]
  NOT: [MassScalarWhereInput!]
}

type MassSubscriptionPayload {
  mutation: MutationType!
  node: Mass
  updatedFields: [String!]
  previousValues: MassPreviousValues
}

input MassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MassWhereInput
  AND: [MassSubscriptionWhereInput!]
  OR: [MassSubscriptionWhereInput!]
  NOT: [MassSubscriptionWhereInput!]
}

input MassUpdateManyDataInput {
  value: Int
  unit: String
}

input MassUpdateManyInput {
  create: [MassCreateInput!]
  deleteMany: [MassScalarWhereInput!]
  updateMany: [MassUpdateManyWithWhereNestedInput!]
}

input MassUpdateManyMutationInput {
  value: Int
  unit: String
}

input MassUpdateManyWithWhereNestedInput {
  where: MassScalarWhereInput!
  data: MassUpdateManyDataInput!
}

input MassWhereInput {
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  AND: [MassWhereInput!]
  OR: [MassWhereInput!]
  NOT: [MassWhereInput!]
}

type Mutation {
  createMass(data: MassCreateInput!): Mass!
  updateManyMasses(data: MassUpdateManyMutationInput!, where: MassWhereInput): BatchPayload!
  deleteManyMasses(where: MassWhereInput): BatchPayload!
  createPlanet(data: PlanetCreateInput!): Planet!
  updatePlanet(data: PlanetUpdateInput!, where: PlanetWhereUniqueInput!): Planet
  updateManyPlanets(data: PlanetUpdateManyMutationInput!, where: PlanetWhereInput): BatchPayload!
  upsertPlanet(where: PlanetWhereUniqueInput!, create: PlanetCreateInput!, update: PlanetUpdateInput!): Planet!
  deletePlanet(where: PlanetWhereUniqueInput!): Planet
  deleteManyPlanets(where: PlanetWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Planet {
  id: ID!
  namePlanet: String!
  mass(where: MassWhereInput, orderBy: MassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mass!]
}

type PlanetConnection {
  pageInfo: PageInfo!
  edges: [PlanetEdge]!
  aggregate: AggregatePlanet!
}

input PlanetCreateInput {
  id: ID
  namePlanet: String!
  mass: MassCreateManyInput
}

type PlanetEdge {
  node: Planet!
  cursor: String!
}

enum PlanetOrderByInput {
  id_ASC
  id_DESC
  namePlanet_ASC
  namePlanet_DESC
}

type PlanetPreviousValues {
  id: ID!
  namePlanet: String!
}

type PlanetSubscriptionPayload {
  mutation: MutationType!
  node: Planet
  updatedFields: [String!]
  previousValues: PlanetPreviousValues
}

input PlanetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanetWhereInput
  AND: [PlanetSubscriptionWhereInput!]
  OR: [PlanetSubscriptionWhereInput!]
  NOT: [PlanetSubscriptionWhereInput!]
}

input PlanetUpdateInput {
  namePlanet: String
  mass: MassUpdateManyInput
}

input PlanetUpdateManyMutationInput {
  namePlanet: String
}

input PlanetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  namePlanet: String
  namePlanet_not: String
  namePlanet_in: [String!]
  namePlanet_not_in: [String!]
  namePlanet_lt: String
  namePlanet_lte: String
  namePlanet_gt: String
  namePlanet_gte: String
  namePlanet_contains: String
  namePlanet_not_contains: String
  namePlanet_starts_with: String
  namePlanet_not_starts_with: String
  namePlanet_ends_with: String
  namePlanet_not_ends_with: String
  mass_every: MassWhereInput
  mass_some: MassWhereInput
  mass_none: MassWhereInput
  AND: [PlanetWhereInput!]
  OR: [PlanetWhereInput!]
  NOT: [PlanetWhereInput!]
}

input PlanetWhereUniqueInput {
  id: ID
}

type Query {
  masses(where: MassWhereInput, orderBy: MassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mass]!
  massesConnection(where: MassWhereInput, orderBy: MassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MassConnection!
  planet(where: PlanetWhereUniqueInput!): Planet
  planets(where: PlanetWhereInput, orderBy: PlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Planet]!
  planetsConnection(where: PlanetWhereInput, orderBy: PlanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanetConnection!
  node(id: ID!): Node
}

type Subscription {
  mass(where: MassSubscriptionWhereInput): MassSubscriptionPayload
  planet(where: PlanetSubscriptionWhereInput): PlanetSubscriptionPayload
}
`
      }
    